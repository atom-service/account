language: go
go:
  - master

# 允许执行的分支
branches:
  only:
    - master
    - /v\d+\.\d+\..*/

addons:
  ssh_known_hosts:
  - 132.232.106.236:44

# 预执行脚本
before_install:
  # 安装依赖
  - export ROOT_PATH=`pwd`
  - ./deploy/build.sh installVendor

install: skip

before_script: skip

script:
  # 编译
  - ./deploy/build.sh build

before_deploy:
  # 准备服务器的 ssh_key
  - cd $ROOT_PATH
  - git clone https://github.com/yinxulai/keystore.git ./keystore ;
  - cd ./keystore ;
  - ./crypt.sh -d $pass_k $pass_iv ; # 解密所有的 key
  - export GITHUB_TOKEN=`cat ./github.token.key ;` ; # 拿到 GITHUB_TOKEN
  - ./deploy.sh server root 132.232.106.236 44 deploy.key ; # 部署配置 SSH 服务，方便下面通过别名直接连接服务器
  - cd $ROOT_PATH

# 部署版本
deploy:
  - provider: releases
    file: build/*
    file_glob: trueƒ√
    overwrite: true
    skip_cleanup: true
    api_key: $GITHUB_TOKEN
    on:
      tags: true
      branch: /v\d+\.\d+\..*/

# 准备服务器环境及部署脚本。
after_deploy:
  # 执行脚本
  - cd $ROOT_PATH ;
  - TEMPDIR=`mktemp -d` ; # 获取一个随机目录
  - tar -zcvf ./deploy.tar.gz ./deploy ; # 压缩包
  - ssh -tt server "mkdir -p $TEMPDIR ;" ; # 创建缓存目录
  - scp ./deploy.tar.gz server:$TEMPDIR/deploy.tar.gz ; #  上传部署包
  - ssh -tt server "tar -zxvf $TEMPDIR/deploy.tar.gz -C $TEMPDIR ;" ; # 解压部署包
  - ssh -tt server "bash -c $TEMPDIR/deploy/install.sh $TRAVIS_TAG ;" ; # 执行部署脚本
  - ssh -tt server "rm -rf $TEMPDIR;" ; # 清空缓存目录
after_script: skip
