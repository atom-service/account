syntax = "proto3";

package standard;

// 状态
enum State {
  UNKNOWN         = 0 ;   // 未知
  SUCCESS         = 1 ;   // 成功
  FAILURE         = 2 ;   // 失败
  SERVICE_ERROR   = 3 ;   // 服务错误
  PARAMS_INVALID  = 5 ;   // 参数不合法
  ILLEGAL_REQUEST = 6 ;   // 非法请求
  LABEL_NOT_EXIST = 7 ;   // 标签不存在
  USER_NOT_EXIST  = 8 ;   // 用户不存在
  USER_ALREADY_EXISTS  = 9 ;   // 用户已经存在
  USER_VERIFY_FAILURE  = 10 ;   // 用户验证失败
  LABEL_ALREADY_EXISTS = 11 ;   // 标签已经存在
  DB_OPERATION_FATLURE = 12 ;    // 数据库操作失败
}


// Label 标签
message Label {
	uint64 ID          = 1 ;
	string Type        = 2 ;
	string State       = 3 ;
  string Value       = 4 ;
  uint64 Owner       = 5 ;
  string CreateTime  = 6 ;
  string UpdateTime  = 7 ;
}

// User 用户
message User {
  uint64 ID             = 1 ;
  string Type           = 2 ;
  string Avatar         = 3 ;
  uint64 Inviter        = 4 ;
	string Nickname       = 5 ;
	string Username       = 6 ;
  string Password       = 7 ;
  string CreateTime     = 8 ;
  string UpdateTime     = 9 ;
}

message CreateRequest {
  User User = 1 ;
}

message CreateResponse {
  State  State   = 1 ;
  string Message = 2 ;
}

message QueryByIDRequest {
  uint64 ID      = 1 ;
}

message QueryByIDResponse {
  State  State   = 1 ;
  string Message = 2 ;
  User   Data    = 3 ;
}
message UpdateByIDRequest {
  uint64 ID      = 1 ;
  User   Data    = 2 ;
}

message QueryByUsernameRequest{
  string Username = 3 ;
}

message QueryByUsernameResponse{
  State  State   = 1 ;
  string Message = 2 ;
  User   Data    = 3 ;
}

message UpdateByIDResponse {
  State  State   = 1 ;
  string Message = 2 ;
}

message DeleteByIDRequest {
  uint64 ID      = 1 ;
}

message DeleteByIDResponse {
  State  State    = 1 ;
  string Message  = 2 ;
}

message UpdatePasswordByIDRequest {
  uint64 ID         = 1 ;
  string Password   = 2 ;
}

message UpdatePasswordByIDResponse {
  State  State   = 1 ;
  string Message = 2 ;
}

message VerifyPasswordByIDRequest {
  uint64 ID         = 1 ;
  string Password   = 2 ;
}

message VerifyPasswordByIDResponse {
  State  State   = 1 ;
  string Message = 2 ;
  bool   Data    = 3 ;
}


message VerifyPasswordByUsernameRequest {
  string Username   = 1 ;
  string Password   = 2 ;
}

message VerifyPasswordByUsernameResponse {
  State  State   = 1 ;
  string Message = 2 ;
  bool   Data   = 3 ;
}

message CreateLabelByOwnerRequest {
  uint64 Owner       = 1 ;
  Label  Label        = 2 ;
}

message CreateLabelByOwnerResponse {
  State  State   = 1 ;
  string Message = 2 ;
}

message QueryLabelByIDRequest {
  uint64 ID       = 1 ;
}

message QueryLabelByIDResponse {
  State  State   = 1 ;
  string Message = 2 ;
  Label  Data    = 3 ;
}

message UpdateLabelByIDRequest {
  uint64 ID      = 1 ;
  Label  Data    = 3 ;
}

message UpdateLabelByIDResponse {
  State  State   = 1 ;
  string Message = 2 ;
}

message DeleteLabelByIDRequest {
  uint64 ID      = 1 ;
}

message DeleteLabelByIDResponse {
  State  State   = 1 ;
  string Message = 2 ;
}

message QueryLabelByOwnerRequest {
  uint64 Owner   = 1 ;
  uint64 Limit = 2 ;
  uint64 Offset = 3 ;
}

message QueryLabelByOwnerResponse {
  State  State          = 1 ;
  string Message        = 2 ;
  uint64 Total = 3 ;
  repeated Label Data   = 4 ;
}

service Account {
  // 用户操作
  rpc Create(CreateRequest)returns(CreateResponse){} // 创建一个用户
  rpc QueryByID(QueryByIDRequest)returns(QueryByIDResponse){} // 通过 ID 查询
  rpc UpdateByID(UpdateByIDRequest)returns(UpdateByIDResponse){} // 更新用户
  rpc DeleteByID(DeleteByIDRequest)returns(DeleteByIDResponse){} // 删除用户
  rpc QueryByUsername(QueryByUsernameRequest)returns(QueryByUsernameResponse){} // 通过 用户名 查询
  rpc UpdatePasswordByID(UpdatePasswordByIDRequest)returns(UpdatePasswordByIDResponse){} // 更新用户密码
  rpc VerifyPasswordByID(VerifyPasswordByIDRequest)returns(VerifyPasswordByIDResponse){} // 验证密码
  rpc VerifyPasswordByUsername(VerifyPasswordByUsernameRequest)returns(VerifyPasswordByUsernameResponse){} // 验证密码
  // 标签操作
  rpc QueryLabelByID(QueryLabelByIDRequest)returns(QueryLabelByIDResponse){} // 根据 ID 查询标签
  rpc UpdateLabelByID(UpdateLabelByIDRequest)returns(UpdateLabelByIDResponse){} // 更新用户
  rpc DeleteLabelByID(DeleteLabelByIDRequest)returns(DeleteLabelByIDResponse){} // 删除用户

  rpc CreateLabelByOwner(CreateLabelByOwnerRequest)returns(CreateLabelByOwnerResponse){} // 创建一个用户
  rpc QueryLabelByOwner(QueryLabelByOwnerRequest)returns(QueryLabelByOwnerResponse){} // 根据所有人查询标签
}
