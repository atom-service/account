// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: standard.proto

package standard

import (
	encoding_json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	golang_org_x_net_context "golang.org/x/net/context"
	google_golang_org_grpc "google.golang.org/grpc"
	io "io"
	log "log"
	math "math"
	net_http "net/http"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var DefaultHtmlStringer = func(req, resp interface{}) ([]byte, error) {
	header := []byte("<p><div class=\"container\"><pre>")
	data, err := encoding_json.MarshalIndent(resp, "", "\t")
	if err != nil {
		return nil, err
	}
	footer := []byte("</pre></div></p>")
	return append(append(header, data...), footer...), nil
}

func Serve(httpAddr, grpcAddr string, stringer func(req, resp interface{}) ([]byte, error), opts ...google_golang_org_grpc.DialOption) {
	handler, err := NewHandler(grpcAddr, stringer, opts...)
	if err != nil {
		log.Fatalf("NewHandler(%q) = %v", grpcAddr, err)
	}
	if err := net_http.ListenAndServe(httpAddr, handler); err != nil {
		log.Fatal(err)
	}
}
func NewHandler(grpcAddr string, stringer func(req, resp interface{}) ([]byte, error), opts ...google_golang_org_grpc.DialOption) (net_http.Handler, error) {
	conn, err := google_golang_org_grpc.Dial(grpcAddr, opts...)
	if err != nil {
		return nil, err
	}
	mux := net_http.NewServeMux()
	AccountClient := NewAccountClient(conn)
	AccountServer := NewHTMLAccountServer(AccountClient, stringer)
	mux.HandleFunc("/Account/Create", AccountServer.Create)
	mux.HandleFunc("/Account/QueryByID", AccountServer.QueryByID)
	mux.HandleFunc("/Account/UpdateByID", AccountServer.UpdateByID)
	mux.HandleFunc("/Account/DeleteByID", AccountServer.DeleteByID)
	mux.HandleFunc("/Account/QueryByUsername", AccountServer.QueryByUsername)
	mux.HandleFunc("/Account/UpdatePasswordByID", AccountServer.UpdatePasswordByID)
	mux.HandleFunc("/Account/VerifyPasswordByID", AccountServer.VerifyPasswordByID)
	mux.HandleFunc("/Account/VerifyPasswordByUsername", AccountServer.VerifyPasswordByUsername)
	mux.HandleFunc("/Account/QueryLabelByID", AccountServer.QueryLabelByID)
	mux.HandleFunc("/Account/UpdateLabelByID", AccountServer.UpdateLabelByID)
	mux.HandleFunc("/Account/DeleteLabelByID", AccountServer.DeleteLabelByID)
	mux.HandleFunc("/Account/CreateLabelByOwner", AccountServer.CreateLabelByOwner)
	mux.HandleFunc("/Account/QueryLabelByOwner", AccountServer.QueryLabelByOwner)
	return mux, nil
}

type htmlAccount struct {
	client   AccountClient
	stringer func(req, resp interface{}) ([]byte, error)
}

func NewHTMLAccountServer(client AccountClient, stringer func(req, resp interface{}) ([]byte, error)) *htmlAccount {
	return &htmlAccount{client, stringer}
}

var FormAccount_Create string = `<div class="container"><div class="jumbotron">
	<h3>Account: Create</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"CreateRequest_RootKeyword": buildCreateRequest_RootKeyword(emptyIfNull(null)),
"User_User": buildUser_User(emptyIfNull(null)),}
	function buildUser_User(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="User_User" fieldname="User" repeated="false">';
s += '<div class="row"><div class="col-sm-2">'
s += '<a href="#" class="del-child btn btn-danger btn-xs" role="button" fieldname="User">Remove</a>'
s += '</div><div class="col-sm-10">'
s += '<label class="heading">User</label>'
s += '</div></div>'
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Type: </label><div class="col-sm-10"><input class="form-control" name="Type" type="text" '+setStrValue("", json["Type"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Avatar: </label><div class="col-sm-10"><input class="form-control" name="Avatar" type="text" '+setStrValue("", json["Avatar"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Inviter: </label><div class="col-sm-10"><input class="form-control" name="Inviter" type="number" step="1" '+setValue(0, json["Inviter"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Nickname: </label><div class="col-sm-10"><input class="form-control" name="Nickname" type="text" '+setStrValue("", json["Nickname"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Username: </label><div class="col-sm-10"><input class="form-control" name="Username" type="text" '+setStrValue("", json["Username"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Password: </label><div class="col-sm-10"><input class="form-control" name="Password" type="text" '+setStrValue("", json["Password"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">CreateTime: </label><div class="col-sm-10"><input class="form-control" name="CreateTime" type="text" '+setStrValue("", json["CreateTime"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">UpdateTime: </label><div class="col-sm-10"><input class="form-control" name="UpdateTime" type="text" '+setStrValue("", json["UpdateTime"])+'/></div></div>';
				

		s += '</div>';
		return s;
		}

function buildCreateRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="CreateRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="children" type="User_User">' + buildUser_User(json["User"]);
			s += '</div>';
		s += setLink(json, "User_User", "User", "");
		

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["CreateRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildCreateRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./Create?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) Create(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `Create`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &CreateRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_Create))
	if someValue {
		reply, err := this.client.Create(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_QueryByID string = `<div class="container"><div class="jumbotron">
	<h3>Account: QueryByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"QueryByIDRequest_RootKeyword": buildQueryByIDRequest_RootKeyword(emptyIfNull(null)),}
	function buildQueryByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="QueryByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["QueryByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildQueryByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./QueryByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) QueryByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `QueryByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &QueryByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_QueryByID))
	if someValue {
		reply, err := this.client.QueryByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_UpdateByID string = `<div class="container"><div class="jumbotron">
	<h3>Account: UpdateByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"UpdateByIDRequest_RootKeyword": buildUpdateByIDRequest_RootKeyword(emptyIfNull(null)),
"User_Data": buildUser_Data(emptyIfNull(null)),}
	function buildUser_Data(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="User_Data" fieldname="Data" repeated="false">';
s += '<div class="row"><div class="col-sm-2">'
s += '<a href="#" class="del-child btn btn-danger btn-xs" role="button" fieldname="Data">Remove</a>'
s += '</div><div class="col-sm-10">'
s += '<label class="heading">Data</label>'
s += '</div></div>'
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Type: </label><div class="col-sm-10"><input class="form-control" name="Type" type="text" '+setStrValue("", json["Type"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Avatar: </label><div class="col-sm-10"><input class="form-control" name="Avatar" type="text" '+setStrValue("", json["Avatar"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Inviter: </label><div class="col-sm-10"><input class="form-control" name="Inviter" type="number" step="1" '+setValue(0, json["Inviter"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Nickname: </label><div class="col-sm-10"><input class="form-control" name="Nickname" type="text" '+setStrValue("", json["Nickname"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Username: </label><div class="col-sm-10"><input class="form-control" name="Username" type="text" '+setStrValue("", json["Username"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Password: </label><div class="col-sm-10"><input class="form-control" name="Password" type="text" '+setStrValue("", json["Password"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">CreateTime: </label><div class="col-sm-10"><input class="form-control" name="CreateTime" type="text" '+setStrValue("", json["CreateTime"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">UpdateTime: </label><div class="col-sm-10"><input class="form-control" name="UpdateTime" type="text" '+setStrValue("", json["UpdateTime"])+'/></div></div>';
				

		s += '</div>';
		return s;
		}

function buildUpdateByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="UpdateByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="children" type="User_Data">' + buildUser_Data(json["Data"]);
			s += '</div>';
		s += setLink(json, "User_Data", "Data", "");
		

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["UpdateByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildUpdateByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./UpdateByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) UpdateByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `UpdateByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &UpdateByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_UpdateByID))
	if someValue {
		reply, err := this.client.UpdateByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_DeleteByID string = `<div class="container"><div class="jumbotron">
	<h3>Account: DeleteByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"DeleteByIDRequest_RootKeyword": buildDeleteByIDRequest_RootKeyword(emptyIfNull(null)),}
	function buildDeleteByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="DeleteByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["DeleteByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildDeleteByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./DeleteByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) DeleteByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `DeleteByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &DeleteByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_DeleteByID))
	if someValue {
		reply, err := this.client.DeleteByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_QueryByUsername string = `<div class="container"><div class="jumbotron">
	<h3>Account: QueryByUsername</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"QueryByUsernameRequest_RootKeyword": buildQueryByUsernameRequest_RootKeyword(emptyIfNull(null)),}
	function buildQueryByUsernameRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="QueryByUsernameRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">Username: </label><div class="col-sm-10"><input class="form-control" name="Username" type="text" '+setStrValue("", json["Username"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["QueryByUsernameRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildQueryByUsernameRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./QueryByUsername?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) QueryByUsername(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `QueryByUsername`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &QueryByUsernameRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_QueryByUsername))
	if someValue {
		reply, err := this.client.QueryByUsername(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_UpdatePasswordByID string = `<div class="container"><div class="jumbotron">
	<h3>Account: UpdatePasswordByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"UpdatePasswordByIDRequest_RootKeyword": buildUpdatePasswordByIDRequest_RootKeyword(emptyIfNull(null)),}
	function buildUpdatePasswordByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="UpdatePasswordByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Password: </label><div class="col-sm-10"><input class="form-control" name="Password" type="text" '+setStrValue("", json["Password"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["UpdatePasswordByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildUpdatePasswordByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./UpdatePasswordByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) UpdatePasswordByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `UpdatePasswordByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &UpdatePasswordByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_UpdatePasswordByID))
	if someValue {
		reply, err := this.client.UpdatePasswordByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_VerifyPasswordByID string = `<div class="container"><div class="jumbotron">
	<h3>Account: VerifyPasswordByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"VerifyPasswordByIDRequest_RootKeyword": buildVerifyPasswordByIDRequest_RootKeyword(emptyIfNull(null)),}
	function buildVerifyPasswordByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="VerifyPasswordByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Password: </label><div class="col-sm-10"><input class="form-control" name="Password" type="text" '+setStrValue("", json["Password"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["VerifyPasswordByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildVerifyPasswordByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./VerifyPasswordByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) VerifyPasswordByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `VerifyPasswordByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &VerifyPasswordByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_VerifyPasswordByID))
	if someValue {
		reply, err := this.client.VerifyPasswordByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_VerifyPasswordByUsername string = `<div class="container"><div class="jumbotron">
	<h3>Account: VerifyPasswordByUsername</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"VerifyPasswordByUsernameRequest_RootKeyword": buildVerifyPasswordByUsernameRequest_RootKeyword(emptyIfNull(null)),}
	function buildVerifyPasswordByUsernameRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="VerifyPasswordByUsernameRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">Username: </label><div class="col-sm-10"><input class="form-control" name="Username" type="text" '+setStrValue("", json["Username"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Password: </label><div class="col-sm-10"><input class="form-control" name="Password" type="text" '+setStrValue("", json["Password"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["VerifyPasswordByUsernameRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildVerifyPasswordByUsernameRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./VerifyPasswordByUsername?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) VerifyPasswordByUsername(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `VerifyPasswordByUsername`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &VerifyPasswordByUsernameRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_VerifyPasswordByUsername))
	if someValue {
		reply, err := this.client.VerifyPasswordByUsername(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_QueryLabelByID string = `<div class="container"><div class="jumbotron">
	<h3>Account: QueryLabelByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"QueryLabelByIDRequest_RootKeyword": buildQueryLabelByIDRequest_RootKeyword(emptyIfNull(null)),}
	function buildQueryLabelByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="QueryLabelByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["QueryLabelByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildQueryLabelByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./QueryLabelByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) QueryLabelByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `QueryLabelByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &QueryLabelByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_QueryLabelByID))
	if someValue {
		reply, err := this.client.QueryLabelByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_UpdateLabelByID string = `<div class="container"><div class="jumbotron">
	<h3>Account: UpdateLabelByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"UpdateLabelByIDRequest_RootKeyword": buildUpdateLabelByIDRequest_RootKeyword(emptyIfNull(null)),
"Label_Data": buildLabel_Data(emptyIfNull(null)),}
	function buildLabel_Data(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="Label_Data" fieldname="Data" repeated="false">';
s += '<div class="row"><div class="col-sm-2">'
s += '<a href="#" class="del-child btn btn-danger btn-xs" role="button" fieldname="Data">Remove</a>'
s += '</div><div class="col-sm-10">'
s += '<label class="heading">Data</label>'
s += '</div></div>'
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Type: </label><div class="col-sm-10"><input class="form-control" name="Type" type="text" '+setStrValue("", json["Type"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">State: </label><div class="col-sm-10"><input class="form-control" name="State" type="text" '+setStrValue("", json["State"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Value: </label><div class="col-sm-10"><input class="form-control" name="Value" type="text" '+setStrValue("", json["Value"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Owner: </label><div class="col-sm-10"><input class="form-control" name="Owner" type="number" step="1" '+setValue(0, json["Owner"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">CreateTime: </label><div class="col-sm-10"><input class="form-control" name="CreateTime" type="text" '+setStrValue("", json["CreateTime"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">UpdateTime: </label><div class="col-sm-10"><input class="form-control" name="UpdateTime" type="text" '+setStrValue("", json["UpdateTime"])+'/></div></div>';
				

		s += '</div>';
		return s;
		}

function buildUpdateLabelByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="UpdateLabelByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="children" type="Label_Data">' + buildLabel_Data(json["Data"]);
			s += '</div>';
		s += setLink(json, "Label_Data", "Data", "");
		

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["UpdateLabelByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildUpdateLabelByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./UpdateLabelByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) UpdateLabelByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `UpdateLabelByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &UpdateLabelByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_UpdateLabelByID))
	if someValue {
		reply, err := this.client.UpdateLabelByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_DeleteLabelByID string = `<div class="container"><div class="jumbotron">
	<h3>Account: DeleteLabelByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"DeleteLabelByIDRequest_RootKeyword": buildDeleteLabelByIDRequest_RootKeyword(emptyIfNull(null)),}
	function buildDeleteLabelByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="DeleteLabelByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["DeleteLabelByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildDeleteLabelByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./DeleteLabelByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) DeleteLabelByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `DeleteLabelByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &DeleteLabelByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_DeleteLabelByID))
	if someValue {
		reply, err := this.client.DeleteLabelByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_CreateLabelByOwner string = `<div class="container"><div class="jumbotron">
	<h3>Account: CreateLabelByOwner</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"CreateLabelByOwnerRequest_RootKeyword": buildCreateLabelByOwnerRequest_RootKeyword(emptyIfNull(null)),
"Label_Label": buildLabel_Label(emptyIfNull(null)),}
	function buildLabel_Label(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="Label_Label" fieldname="Label" repeated="false">';
s += '<div class="row"><div class="col-sm-2">'
s += '<a href="#" class="del-child btn btn-danger btn-xs" role="button" fieldname="Label">Remove</a>'
s += '</div><div class="col-sm-10">'
s += '<label class="heading">Label</label>'
s += '</div></div>'
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Type: </label><div class="col-sm-10"><input class="form-control" name="Type" type="text" '+setStrValue("", json["Type"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">State: </label><div class="col-sm-10"><input class="form-control" name="State" type="text" '+setStrValue("", json["State"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Value: </label><div class="col-sm-10"><input class="form-control" name="Value" type="text" '+setStrValue("", json["Value"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Owner: </label><div class="col-sm-10"><input class="form-control" name="Owner" type="number" step="1" '+setValue(0, json["Owner"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">CreateTime: </label><div class="col-sm-10"><input class="form-control" name="CreateTime" type="text" '+setStrValue("", json["CreateTime"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">UpdateTime: </label><div class="col-sm-10"><input class="form-control" name="UpdateTime" type="text" '+setStrValue("", json["UpdateTime"])+'/></div></div>';
				

		s += '</div>';
		return s;
		}

function buildCreateLabelByOwnerRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="CreateLabelByOwnerRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">Owner: </label><div class="col-sm-10"><input class="form-control" name="Owner" type="number" step="1" '+setValue(0, json["Owner"])+'/></div></div>';
				
s += '<div class="children" type="Label_Label">' + buildLabel_Label(json["Label"]);
			s += '</div>';
		s += setLink(json, "Label_Label", "Label", "");
		

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["CreateLabelByOwnerRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildCreateLabelByOwnerRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./CreateLabelByOwner?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) CreateLabelByOwner(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `CreateLabelByOwner`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &CreateLabelByOwnerRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_CreateLabelByOwner))
	if someValue {
		reply, err := this.client.CreateLabelByOwner(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormAccount_QueryLabelByOwner string = `<div class="container"><div class="jumbotron">
	<h3>Account: QueryLabelByOwner</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"QueryLabelByOwnerRequest_RootKeyword": buildQueryLabelByOwnerRequest_RootKeyword(emptyIfNull(null)),}
	function buildQueryLabelByOwnerRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="QueryLabelByOwnerRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">Owner: </label><div class="col-sm-10"><input class="form-control" name="Owner" type="number" step="1" '+setValue(0, json["Owner"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Limit: </label><div class="col-sm-10"><input class="form-control" name="Limit" type="number" step="1" '+setValue(0, json["Limit"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Offset: </label><div class="col-sm-10"><input class="form-control" name="Offset" type="number" step="1" '+setValue(0, json["Offset"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["QueryLabelByOwnerRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildQueryLabelByOwnerRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./QueryLabelByOwner?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlAccount) QueryLabelByOwner(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Account`, `QueryLabelByOwner`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &QueryLabelByOwnerRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormAccount_QueryLabelByOwner))
	if someValue {
		reply, err := this.client.QueryLabelByOwner(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var Header func(servName, methodName string) string = func(servName, methodName string) string {
	return `
	<html>
	<head>
	<title>` + servName + `:` + methodName + `</title>
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
	</head>
	<body>
	`
}
var Footer string = `
	</body>
	</html>
	`
