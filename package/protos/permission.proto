syntax = "proto3";

option go_package = "./protos";

import "common.proto";
import "account.proto";

enum ResourceAction {
  Insert = 0;
  Delete = 1;
  Update = 2;
  Query  = 3;
}

message RoleResource {
  int64 ResourceID = 1;
  ResourceAction Action = 2;
  repeated string Rules = 3;
}

message Role {
  int64 ID = 1;
  string Name = 2;
  string Description = 3;
  repeated RoleResource Resources = 4;

  string CreatedTime = 5;
  string UpdatedTime = 6;
  optional string DeletedTime = 7;
}

message Resource {
  int64 ID = 1;
  string Name = 2;
  string Description = 3;
  string CreatedTime = 4;
  string UpdatedTime = 5;
  optional string DeletedTime = 6;
}

message CreateRoleRequest {
  string Name = 1;
  string Description = 2;
}

message CreateRoleResponse {
  State State = 1;
  string Message = 2;
  optional Role Data = 3;
}

message RoleSelector {
  optional int64 ID = 1;
  optional string Name = 2;
}

message QueryRolesRequest {
  RoleSelector Selector = 1;
  optional SortOption Sort = 2;
  optional PaginationOption Pagination = 3;
}

message QueryRolesResponse {
  message DataType {
    int64 Total = 1;
    repeated Role Roles = 2;
  }

  State State = 1;
  string Message = 2;
  DataType Data = 3;
}

message UpdateRoleRequest {
  message UpdateData {
    optional string Name = 1;
    optional string Description = 2;
    repeated RoleResource Resources = 3;
  }

  RoleSelector Selector = 1;
  UpdateData Data = 2;
}

message UpdateRoleResponse {
  State State = 1;
  string Message = 2;
  Role Data = 3;
}

message DeleteRoleRequest {
  RoleSelector Selector = 1;
}

message DeleteRoleResponse {
  State State = 1;
  string Message = 2;
}

message CreateResourceRequest {
  string Name = 1;
  string Description = 2;
}

message CreateResourceResponse {
  State State = 1;
  string Message = 2;
  Resource Data = 3;
}

message ResourceSelector {
  optional int64 ID = 1;
  optional string Name = 2;
}

message QueryResourcesRequest {
  ResourceSelector Selector = 1;
  optional SortOption Sort = 2;
  optional PaginationOption Pagination = 3;
}

message QueryResourcesResponse {
  message DataType {
    int64 Total = 1;
    repeated Resource Resources = 2;
  }

  State State = 1;
  string Message = 2;
  DataType Data = 3;
}

message DeleteResourceRequest {
  RoleSelector Selector = 1;
}

message DeleteResourceResponse {
  State State = 1;
  string Message = 2;
}

message UpdateResourceRequest {
  message UpdateData {
    optional string Name = 1;
    optional string Description = 2;
  }

  RoleSelector Selector = 1;
  UpdateData Data = 2;
}

message UpdateResourceResponse {
  State State = 1;
  string Message = 2;
}

message UserResourceRule {
  string Key = 1;
  string Value = 2;
}

message UserResourceSummary {
  string Name = 1;
  ResourceAction Action = 2;
  repeated UserResourceRule Rules = 3;
}

message SummaryForUserRequest {
  UserSelector UserSelector = 1;
}

message SummaryForUserResponse {
  State State = 1;
  string Message = 2;
  repeated UserResourceSummary Data = 3;
}

message ApplyRoleForUserRequest {
  UserSelector User = 1;
  repeated RoleSelector Roles = 2;
}

message ApplyRoleForUserResponse {
  State State = 1;
  string Message = 2;
}

message RemoveRoleForUserRequest {
  UserSelector User = 1;
  repeated RoleSelector Roles = 2;
}

message RemoveRoleForUserResponse {
  State State = 1;
  string Message = 2;
}

service PermissionService {
  rpc CreateRole(CreateRoleRequest)returns(CreateRoleResponse){} 
  rpc QueryRoles(QueryRolesRequest)returns(QueryRolesResponse){} 
  rpc UpdateRole(UpdateRoleRequest)returns(UpdateRoleResponse){} 
  rpc DeleteRole(DeleteRoleRequest)returns(DeleteRoleResponse){}

  rpc CreateResource(CreateResourceRequest)returns(CreateResourceResponse){}
  rpc QueryResources(QueryResourcesRequest)returns(QueryResourcesResponse){}
  rpc DeleteResource(DeleteResourceRequest)returns(DeleteResourceResponse){}
  rpc UpdateResource(UpdateResourceRequest)returns(UpdateResourceResponse){}

  rpc SummaryForUser(SummaryForUserRequest)returns(SummaryForUserResponse){}
  rpc ApplyRoleForUser(ApplyRoleForUserRequest)returns(ApplyRoleForUserResponse){}
  rpc RemoveRoleForUser(RemoveRoleForUserRequest)returns(RemoveRoleForUserResponse){}
}
