// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: atom_service.account.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error)
	QueryUsers(ctx context.Context, in *QueryUsersRequest, opts ...grpc.CallOption) (*QueryUsersResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// 密钥系统用于用户管理 API 调用的凭证
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	QuerySecrets(ctx context.Context, in *QuerySecretsRequest, opts ...grpc.CallOption) (*QuerySecretsResponse, error)
	DisableSecret(ctx context.Context, in *DisableSecretRequest, opts ...grpc.CallOption) (*DisableSecretResponse, error)
	DeleteSecrets(ctx context.Context, in *DeleteSecretsRequest, opts ...grpc.CallOption) (*DeleteSecretsResponse, error)
	// 标签系统用于保存一些用户状态之类的数据（侧重于用户不直接可见可改）
	UpsertLabel(ctx context.Context, in *UpsertLabelRequest, opts ...grpc.CallOption) (*UpsertLabelResponse, error)
	QueryLabels(ctx context.Context, in *QueryLabelsRequest, opts ...grpc.CallOption) (*QueryLabelsResponse, error)
	DeleteLabels(ctx context.Context, in *DeleteLabelsRequest, opts ...grpc.CallOption) (*DeleteLabelsResponse, error)
	// 设置系统用于保存一些用户偏好设置之类的数据（侧重于用户直接可见可改）
	CreateSetting(ctx context.Context, in *CreateSettingRequest, opts ...grpc.CallOption) (*CreateSettingResponse, error)
	UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error)
	QuerySettings(ctx context.Context, in *QuerySettingsRequest, opts ...grpc.CallOption) (*QuerySettingsResponse, error)
	DeleteSettings(ctx context.Context, in *DeleteSettingsRequest, opts ...grpc.CallOption) (*DeleteSettingsResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error) {
	out := new(SignOutResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) QueryUsers(ctx context.Context, in *QueryUsersRequest, opts ...grpc.CallOption) (*QueryUsersResponse, error) {
	out := new(QueryUsersResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/QueryUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/CreateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) QuerySecrets(ctx context.Context, in *QuerySecretsRequest, opts ...grpc.CallOption) (*QuerySecretsResponse, error) {
	out := new(QuerySecretsResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/QuerySecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DisableSecret(ctx context.Context, in *DisableSecretRequest, opts ...grpc.CallOption) (*DisableSecretResponse, error) {
	out := new(DisableSecretResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/DisableSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteSecrets(ctx context.Context, in *DeleteSecretsRequest, opts ...grpc.CallOption) (*DeleteSecretsResponse, error) {
	out := new(DeleteSecretsResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/DeleteSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpsertLabel(ctx context.Context, in *UpsertLabelRequest, opts ...grpc.CallOption) (*UpsertLabelResponse, error) {
	out := new(UpsertLabelResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/UpsertLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) QueryLabels(ctx context.Context, in *QueryLabelsRequest, opts ...grpc.CallOption) (*QueryLabelsResponse, error) {
	out := new(QueryLabelsResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/QueryLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteLabels(ctx context.Context, in *DeleteLabelsRequest, opts ...grpc.CallOption) (*DeleteLabelsResponse, error) {
	out := new(DeleteLabelsResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/DeleteLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateSetting(ctx context.Context, in *CreateSettingRequest, opts ...grpc.CallOption) (*CreateSettingResponse, error) {
	out := new(CreateSettingResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/CreateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error) {
	out := new(UpdateSettingResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/UpdateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) QuerySettings(ctx context.Context, in *QuerySettingsRequest, opts ...grpc.CallOption) (*QuerySettingsResponse, error) {
	out := new(QuerySettingsResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/QuerySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteSettings(ctx context.Context, in *DeleteSettingsRequest, opts ...grpc.CallOption) (*DeleteSettingsResponse, error) {
	out := new(DeleteSettingsResponse)
	err := c.cc.Invoke(ctx, "/atom_service.account.AccountService/DeleteSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error)
	QueryUsers(context.Context, *QueryUsersRequest) (*QueryUsersResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// 密钥系统用于用户管理 API 调用的凭证
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	QuerySecrets(context.Context, *QuerySecretsRequest) (*QuerySecretsResponse, error)
	DisableSecret(context.Context, *DisableSecretRequest) (*DisableSecretResponse, error)
	DeleteSecrets(context.Context, *DeleteSecretsRequest) (*DeleteSecretsResponse, error)
	// 标签系统用于保存一些用户状态之类的数据（侧重于用户不直接可见可改）
	UpsertLabel(context.Context, *UpsertLabelRequest) (*UpsertLabelResponse, error)
	QueryLabels(context.Context, *QueryLabelsRequest) (*QueryLabelsResponse, error)
	DeleteLabels(context.Context, *DeleteLabelsRequest) (*DeleteLabelsResponse, error)
	// 设置系统用于保存一些用户偏好设置之类的数据（侧重于用户直接可见可改）
	CreateSetting(context.Context, *CreateSettingRequest) (*CreateSettingResponse, error)
	UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error)
	QuerySettings(context.Context, *QuerySettingsRequest) (*QuerySettingsResponse, error)
	DeleteSettings(context.Context, *DeleteSettingsRequest) (*DeleteSettingsResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAccountServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAccountServiceServer) SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedAccountServiceServer) QueryUsers(context.Context, *QueryUsersRequest) (*QueryUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUsers not implemented")
}
func (UnimplementedAccountServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAccountServiceServer) CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedAccountServiceServer) QuerySecrets(context.Context, *QuerySecretsRequest) (*QuerySecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySecrets not implemented")
}
func (UnimplementedAccountServiceServer) DisableSecret(context.Context, *DisableSecretRequest) (*DisableSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSecret not implemented")
}
func (UnimplementedAccountServiceServer) DeleteSecrets(context.Context, *DeleteSecretsRequest) (*DeleteSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecrets not implemented")
}
func (UnimplementedAccountServiceServer) UpsertLabel(context.Context, *UpsertLabelRequest) (*UpsertLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLabel not implemented")
}
func (UnimplementedAccountServiceServer) QueryLabels(context.Context, *QueryLabelsRequest) (*QueryLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLabels not implemented")
}
func (UnimplementedAccountServiceServer) DeleteLabels(context.Context, *DeleteLabelsRequest) (*DeleteLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabels not implemented")
}
func (UnimplementedAccountServiceServer) CreateSetting(context.Context, *CreateSettingRequest) (*CreateSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetting not implemented")
}
func (UnimplementedAccountServiceServer) UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedAccountServiceServer) QuerySettings(context.Context, *QuerySettingsRequest) (*QuerySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySettings not implemented")
}
func (UnimplementedAccountServiceServer) DeleteSettings(context.Context, *DeleteSettingsRequest) (*DeleteSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSettings not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_QueryUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).QueryUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/QueryUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).QueryUsers(ctx, req.(*QueryUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_QuerySecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).QuerySecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/QuerySecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).QuerySecrets(ctx, req.(*QuerySecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DisableSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DisableSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/DisableSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DisableSecret(ctx, req.(*DisableSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/DeleteSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteSecrets(ctx, req.(*DeleteSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpsertLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpsertLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/UpsertLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpsertLabel(ctx, req.(*UpsertLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_QueryLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).QueryLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/QueryLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).QueryLabels(ctx, req.(*QueryLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/DeleteLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteLabels(ctx, req.(*DeleteLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/CreateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateSetting(ctx, req.(*CreateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateSetting(ctx, req.(*UpdateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_QuerySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).QuerySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/QuerySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).QuerySettings(ctx, req.(*QuerySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atom_service.account.AccountService/DeleteSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteSettings(ctx, req.(*DeleteSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atom_service.account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _AccountService_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _AccountService_SignUp_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _AccountService_SignOut_Handler,
		},
		{
			MethodName: "QueryUsers",
			Handler:    _AccountService_QueryUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AccountService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _AccountService_CreateSecret_Handler,
		},
		{
			MethodName: "QuerySecrets",
			Handler:    _AccountService_QuerySecrets_Handler,
		},
		{
			MethodName: "DisableSecret",
			Handler:    _AccountService_DisableSecret_Handler,
		},
		{
			MethodName: "DeleteSecrets",
			Handler:    _AccountService_DeleteSecrets_Handler,
		},
		{
			MethodName: "UpsertLabel",
			Handler:    _AccountService_UpsertLabel_Handler,
		},
		{
			MethodName: "QueryLabels",
			Handler:    _AccountService_QueryLabels_Handler,
		},
		{
			MethodName: "DeleteLabels",
			Handler:    _AccountService_DeleteLabels_Handler,
		},
		{
			MethodName: "CreateSetting",
			Handler:    _AccountService_CreateSetting_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _AccountService_UpdateSetting_Handler,
		},
		{
			MethodName: "QuerySettings",
			Handler:    _AccountService_QuerySettings_Handler,
		},
		{
			MethodName: "DeleteSettings",
			Handler:    _AccountService_DeleteSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atom_service.account.proto",
}
